// URL에 요청(request)을 보내면 응답(response)을 받아서
//비동기식이란
//요청이 들어오면 다 접수 - 접수 1명이면
//실제처리하는 애들이 뒤에 대기중 - 처리 10명에게 분배하여 동시다발적으로 처리
fetch('https://www.google.com')
    .then(응답 =>응답.text())
    .then(리턴값 =>  리턴값)

/*
- response 파라미터로는 리스폰스의 실제 내용 자체가 넘어오는게 아니다.
- response 파라미터에는, 리스폰스에 관한 각종 부가 정보들과, 실제 내용을 함께 갖고 있는 하나의 객체(object)가 넘어옴.
- 그래서 우리가 원하는 리스폰스의 실제 내용을 보려면, response 객체의 text라는 메소드를 호출해야 함.
text 메소드의 리턴값이 바로 response의 실제내용
*/

/*
- fetch 함수는 어떤 객체를 리턴하는데(Promise 객체)
- 이 객체의 then 메소드로, '응답(response)이 왔을 때 실행할 콜백함수를 등록한다.
- 이렇게 등록된 콜백들은 then 메소드로 등록한 순서대로 실행되고
- 이때 이전 <콜백의 리턴값은 이후 콜백이 넘겨받아서 사용할 수 있음>

- response : 요청한 것에 대한 응답
- request : 요청한 내용
- parameter (파라미터) : 매개변수
- argument(아규먼트) : 인자값 (매개변수에 넘겨준 값)
- 리턴값 : 반환 값
- 오브젝트 = 객체 = {키 : value} - 객체명.변수명 / 객체명.메서드명()
- 어레이 = 배열 = [값1, 값2];
- 콜밳함수 - 콜백함수 등록 - 형태 - 함수.메서드안에 인자값(argument)들어감
ex) fetch().then(()=>{}) : then은 콜백함수가 된다.
ex) 요소.eventListenr('click', ()=>{}) : ()=>{}은 콜백함수가 된다.
ex) app.get('/',()=>{}) : ()=>{}은 콜백함수가 된다.
ex) setTimeout(()=>{}), ms단위시간) : ()=>{}은 콜백함수가 된다.

*/

/*
    개발자 도구
    - 웹 브라우저가 내부적으로 어떤 동작을 하고 있는지 살펴보게 해주는 도구
    - 자신이 작성한 코드를 브라우저가 어떻게 해석하고 실행하는지 살펴볼 수 있음

    * 개발자 도구 단축키
    -Windows : Ctrl + Shift + i
    -줄바꿈 : shift + enter
*/